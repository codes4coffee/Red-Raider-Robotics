#pragma config(Motor,  port1,           launcherLeftTwo, tmotorVex393HighSpeed_HBridge, openLoop)
#pragma config(Motor,  port2,           launcherRight, tmotorVex393HighSpeed_MC29, openLoop)
#pragma config(Motor,  port3,           leftBack,      tmotorVex393HighSpeed_MC29, openLoop)
#pragma config(Motor,  port4,           leftFront,     tmotorVex393HighSpeed_MC29, openLoop)
#pragma config(Motor,  port5,           rightFront,    tmotorVex393HighSpeed_MC29, openLoop)
#pragma config(Motor,  port6,           rightBack,     tmotorVex393HighSpeed_MC29, openLoop)
#pragma config(Motor,  port7,           elevator,      tmotorVex393HighSpeed_MC29, openLoop)
#pragma config(Motor,  port8,           launcherLeft,  tmotorVex393HighSpeed_MC29, openLoop)
#pragma config(Motor,  port9,           intakeWheels,  tmotorVex393HighSpeed_MC29, openLoop)
#pragma config(Motor,  port10,          launcherRightTwo, tmotorVex393HighSpeed_HBridge, openLoop)

#pragma platform(VEX)

//Competition Control and Duration Settings
#pragma competitionControl(Competition)
#pragma autonomousDuration(20)
#pragma userControlDuration(120)

#include "Vex_Competition_Includes.c"   //Main competition background code...do not modify!

/////////////////////////////////////////////////////////////////////////////////////////
//
//                          Pre-Autonomous Functions
//
// You may want to perform some actions before the competition starts. Do them in the
// following function.
//
/////////////////////////////////////////////////////////////////////////////////////////

void pre_auton()
{
  // Set bStopTasksBetweenModes to false if you want to keep user created tasks running between
  // Autonomous and Tele-Op modes. You will need to manage all user created tasks if set to false.
  bStopTasksBetweenModes = true;

	// All activities that occur before the competition starts
	// Example: clearing encoders, setting servo positions, ...
}

/////////////////////////////////////////////////////////////////////////////////////////
//
//                                 Autonomous Task
//
// This task is used to control your robot during the autonomous phase of a VEX Competition.
// You must modify the code to add your own robot specific commands here.
//
/////////////////////////////////////////////////////////////////////////////////////////

task autonomous()
{
//Turns on elevator and launcher
motor[elevator] = 30;
motor[launcherLeft] = -68;
motor[launcherRight] = 68;
motor[launcherLeftTwo] = -68;
motor[launcherRightTwo] = 68;
wait1Msec(15000);//Waits 15 seconds
//Turns elevator and launcher off
motor[elevator] = 0;
motor[launcherLeft] = 0;
motor[launcherRight] = 0;
motor[launcherLeftTwo] = 0;
motor[launcherRightTwo] = 0;
	AutonomousCodePlaceholderForTesting();  // Remove this function call once you have "real" code.
}

/////////////////////////////////////////////////////////////////////////////////////////
//
//                                 User Control Task
//
// This task is used to control your robot during the user control phase of a VEX Competition.
// You must modify the code to add your own robot specific commands here.
//
/////////////////////////////////////////////////////////////////////////////////////////

task usercontrol()
{
	// User control code here, inside the loop

  //Calls autonmous mode for 15000 miliseconds(15 seconds)
  //StartTask(autonomous);
  //wait1Msec(15000);
  bool	primaryloop = true;
  bool intake = false;


  //Primary control loop
  while(primaryloop)

  {
    //Forward/Backward movement


    //Raise Elevator, fast
    if(vexRT[Btn6U] == 1 && vexRT[Btn6D] == 0)//RobotC is a finnicky mistress -.-
    {
      motor[elevator] = 120;
    }

    //Raise elvator slowly, for accurate adjustment of the flaps
    else if(vexRT[Btn6D] == 1 && vexRT[Btn6U] == 0)
    {
      motor[elevator] =40;
    }

    //Activates launcher
    //High Launcher Speed
    else if (vexRT[Btn8U] == 1)
    {
      motor[launcherLeft] = -120;
      motor[launcherRight] = 120;
      motor[launcherLeftTwo] = -120;
      motor[launcherRightTwo] = 120;
    }
    else if(vexRT[Ch4] >= 10){
      motor[leftFront] = vexRT[Ch4];
      motor[leftBack] = -vexRT[Ch4];
      motor[rightBack] = vexRT[Ch4];
      motor[rightFront] = -vexRT[Ch4];
    }
    else if(vexRT[Ch4] <= -10){
      motor[leftFront] = -vexRT[Ch4];
      motor[leftBack] = vexRT[Ch4];
      motor[rightBack] = -vexRT[Ch4];
      motor[rightFront] = vexRT[Ch4];
    }
    //Medium Launcher Speed
    else if (vexRT[Btn8R] == 1)
    {
      motor[launcherLeft] = -65;
      motor[launcherRight] = 65;
      motor[launcherLeftTwo] = -65;
      motor[launcherRightTwo] = 65;
    }
    //Low Speed
    else if (vexRT[Btn8D] == 1)
    {
      motor[launcherLeft] = -40;
      motor[launcherRight] = 40;
      motor[launcherLeftTwo] = -40;
      motor[launcherRightTwo] = 40;
    }

    //Deactivates launcher
    else if(vexRT[Btn8L] == 1)
    {
      motor[launcherLeft] = 0;
      motor[launcherRight] = 0;
      motor[launcherLeftTwo] = 0;
      motor[launcherRightTwo] = 0;
    }

    //Toggling intake system
    else if (vexRT[Btn7R])
    {
      //If the intake system is off...
      if (intake == false)
      {
        //Turn it on
        motor[intakeWheels] = 100;
        //Remember it's on
        intake = true;
      }
      //If the intake system is on...
      else if (intake == true)
      {
        //Turn it off
        motor[intakeWheels] = 0;
        //Remember it's off
        intake = false;
      }
    }
    //Sets elevator to zero and starts the loop over
    else
    {
      motor[leftBack] = vexRT[Ch2];
      motor[leftFront] = vexRT[Ch2];
      motor[rightBack] = vexRT[Ch2];
      motor[rightFront] = vexRT[Ch2];
      motor[elevator] = 0;
    }
  }
}

/* Comment section
====================
RobotC error messages are about as useful as Jar Jar Binks - T
RobotC is about as logical as the movie Inception - J
Inception is a pretty logical movie, just convuluted - T
*/
